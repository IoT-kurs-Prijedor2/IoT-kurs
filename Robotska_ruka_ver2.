/*********
  Rui Santos
  Complete project details at https://RandomNerdTutorials.com/esp32-esp8266-web-server-timer-pulse/
  
  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.
*********/

// Import required libraries
#ifdef ESP32
  #include <WiFi.h>
  #include <AsyncTCP.h>
#else
  #include <ESP8266WiFi.h>
  #include <ESPAsyncTCP.h>
#endif
#include <ESPAsyncWebServer.h>
#include <Servo.h>
#include "SPIFFS.h"

Servo myservo1;  // create servo object to control a servo
Servo myservo2;
Servo myservo3;
Servo myservo4;
Servo myservo5;
// twelve servo objects can be created on most boards

/*int pos1 = 0;    // variable to store the servo position
int pos2 = 0;
int pos3 = 0;
int pos4 = 0;
int pos5 = 0;*/

// Replace with your network credentials
const char* ssid = "PREDA";
const char* password = "preda2oo4";

const char* PARAM_INPUT_1 = "value";
const char* PARAM_INPUT_2 = "value";
const char* PARAM_INPUT_3 = "value";
const char* PARAM_INPUT_4 = "value";
const char* PARAM_INPUT_5 = "value";

const char* PARAM_INPUT_6 = "state";

const int output = 2;

String timerSliderValue1 = "10";
String timerSliderValue2 = "10";
String timerSliderValue3 = "10";
String timerSliderValue4 = "10";
String timerSliderValue5 = "10";

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

// Replaces placeholder with button section in your web page
String processor(const String& var){
  //Serial.println(var);
  if(var == "BUTTONPLACEHOLDER"){
    String buttons = "";
    String outputStateValue = outputState();
    buttons+= "<p><label class=\"switch\"><input type=\"checkbox\" onchange=\"toggleCheckbox(this)\" id=\"output\" " + outputStateValue + "><span class=\"slider\"></span></label></p>";
    return buttons;
  }
  else if(var == "TIMERVALUE1"){
    return timerSliderValue1;
  }
  else if(var == "TIMERVALUE2"){
    return timerSliderValue2;
  }
  else if(var == "TIMERVALUE3"){
    return timerSliderValue3;
  }
  else if(var == "TIMERVALUE4"){
    return timerSliderValue4;
  }
  else if(var == "TIMERVALUE5"){
    return timerSliderValue5;
  }
  return String();
}

String outputState(){
  if(digitalRead(output)){
    return "checked";
  }
  else {
    return "";
  }
  return "";
}

void setup(){
  // Serial port for debugging purposes
  Serial.begin(115200);

  // Initialize SPIFFS
  if(!SPIFFS.begin(true)){
    Serial.println("An Error has occurred while mounting SPIFFS");
    return;
  }

  myservo1.attach(13);  // attaches the servo on pin 13 to the servo object
  myservo2.attach(12);
  myservo3.attach(14);
  myservo4.attach(27);
  myservo5.attach(26);

  myservo1.write(timerSliderValue1.toInt());
  myservo2.write(timerSliderValue2.toInt());
  myservo3.write(timerSliderValue3.toInt());
  myservo4.write(timerSliderValue4.toInt());
  myservo5.write(timerSliderValue5.toInt());

  pinMode(output, OUTPUT);
  digitalWrite(output, LOW);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }

  // Print ESP Local IP Address
  Serial.println(WiFi.localIP());

  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/client3.html", String(), false, processor);
  });

  // Send a GET request to <ESP_IP>/update?state=<inputMessage>
  server.on("/update", HTTP_GET, [] (AsyncWebServerRequest *request) {
    String inputMessage;
    // GET input1 value on <ESP_IP>/update?state=<inputMessage>
    if (request->hasParam(PARAM_INPUT_6)) {
      inputMessage = request->getParam(PARAM_INPUT_6)->value();
      digitalWrite(output, inputMessage.toInt());
    }
    else {
      inputMessage = "No message sent";
    }
    Serial.println(inputMessage);
    request->send(SPIFFS, "text/plain", "OK");
  });

  //Slider 1 - #Postolje
  // Send a GET request to <ESP_IP>/slider?value=<inputMessage>
  server.on("/slider1", HTTP_GET, [] (AsyncWebServerRequest *request) {
    String inputMessage1;
    // GET input1 value on <ESP_IP>/slider?value=<inputMessage>
    if (request->hasParam(PARAM_INPUT_1)) {
      inputMessage1 = request->getParam(PARAM_INPUT_1)->value();
      timerSliderValue1 = inputMessage1;
    }
    else {
      inputMessage1 = "No message sent";
    }
    Serial.println(inputMessage1);
    int pos1 = inputMessage1.toInt();
    
    myservo1.write(pos1);
    request->send(200, "text/plain", "OK");
  });

  //Slider 2 - #servo 2
  // Send a GET request to <ESP_IP>/slider?value=<inputMessage>
  server.on("/slider2", HTTP_GET, [] (AsyncWebServerRequest *request) {
    String inputMessage2;
    // GET input1 value on <ESP_IP>/slider?value=<inputMessage>
    if (request->hasParam(PARAM_INPUT_2)) {
      inputMessage2 = request->getParam(PARAM_INPUT_2)->value();
      timerSliderValue2 = inputMessage2;
    }
    else {
      inputMessage2 = "No message sent";
    }
    Serial.println(inputMessage2);
    int pos2 = inputMessage2.toInt();
    
    myservo2.write(pos2);
    request->send(200, "text/plain", "OK");
  });

  //Slider 3 - #servo 3
  // Send a GET request to <ESP_IP>/slider?value=<inputMessage>
  server.on("/slider3", HTTP_GET, [] (AsyncWebServerRequest *request) {
    String inputMessage3;
    // GET input1 value on <ESP_IP>/slider?value=<inputMessage>
    if (request->hasParam(PARAM_INPUT_3)) {
      inputMessage3 = request->getParam(PARAM_INPUT_3)->value();
      timerSliderValue3 = inputMessage3;
    }
    else {
      inputMessage3 = "No message sent";
    }
    Serial.println(inputMessage3);
    int pos3 = inputMessage3.toInt();
    
    myservo3.write(pos3);
    request->send(200, "text/plain", "OK");
  });

  //Slider 4 - #servo 4
  // Send a GET request to <ESP_IP>/slider?value=<inputMessage>
  server.on("/slider4", HTTP_GET, [] (AsyncWebServerRequest *request) {
    String inputMessage4;
    // GET input1 value on <ESP_IP>/slider?value=<inputMessage>
    if (request->hasParam(PARAM_INPUT_4)) {
      inputMessage4 = request->getParam(PARAM_INPUT_4)->value();
      timerSliderValue4 = inputMessage4;
    }
    else {
      inputMessage4 = "No message sent";
    }
    Serial.println(inputMessage4);
    int pos4 = inputMessage4.toInt();
    
    myservo4.write(pos4);
    request->send(200, "text/plain", "OK");
  });

  //Slider 5 - #servo 5
  // Send a GET request to <ESP_IP>/slider?value=<inputMessage>
  server.on("/slider5", HTTP_GET, [] (AsyncWebServerRequest *request) {
    String inputMessage5;
    // GET input1 value on <ESP_IP>/slider?value=<inputMessage>
    if (request->hasParam(PARAM_INPUT_5)) {
      inputMessage5 = request->getParam(PARAM_INPUT_5)->value();
      timerSliderValue5 = inputMessage5;
    }
    else {
      inputMessage5 = "No message sent";
    }
    Serial.println(inputMessage5);
    int pos5 = inputMessage5.toInt();
    
    myservo5.write(pos5);
    request->send(200, "text/plain", "OK");
  });
    
    /*Serial.println(inputMessage);
    int pos = inputMessage.toInt();
    
    myservo1.write(pos);
    request->send(200, "text/plain", "OK");*/

  /*//Slider 2 - #Lakat
  // Send a GET request to <ESP_IP>/slider?value=<inputMessage>
  server.on("/slider2", HTTP_GET, [] (AsyncWebServerRequest *request) {
    String inputMessage2;
    // GET input1 value on <ESP_IP>/slider?value=<inputMessage>
    if (request->hasParam(PARAM_INPUT_3)) {
      inputMessage2 = request->getParam(PARAM_INPUT_3)->value();
      timerSliderValue2 = inputMessage2;
    }
    else {
      inputMessage2 = "No message sent";
    }
  });*/
  
  // Start server
  server.begin();
}
  
void loop() {
  
}
